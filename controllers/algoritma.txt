+++++ GET MENU +++++
const menus = await Menu.findAll().then((menu) => {
      if (!menu) {
        errCode = 404;
        resMessage = "not found";
        return;
      }

      errCode = 200;
      resMessage = "success";
      return JSON.parse(JSON.stringify(menu));
      // simulate error handling
      // throw new Error("test");
    });

+++++ GET CRITERIA +++++
    const criteria = await db.criteria.findAll().then((criteria) => {
      if (!criteria) {
        errCode = 404;
        resMessage = "not found";
        return;
      }

      errCode = 200;
      resMessage = "success";
      return JSON.parse(JSON.stringify(criteria));
      // simulate error handling
      // throw new Error("test");
    });


++++++ GET ORDER DETAIL +++++
    const orderDetail = await db.orderDetail.findAll().then((orderDetail) => {
      if (!orderDetail) {
        errCode = 404;
        resMessage = "not found";
        return;
      }

      errCode = 200;
      resMessage = "success";
      return JSON.parse(JSON.stringify(orderDetail));
      // simulate error handling
      // throw new Error("test");
    });

++++++ DECLARE 5 DATE AGO +++++
 let fiveDaysAgo = new Date();
    fiveDaysAgo.setDate(today.getDate() - 5);


++++++ DECLARE VALUE OF RANGE FOR EACH CRIETERIA ++++++++
const wTime = [1, 3, 5];
const wPrice = [1, 3, 4, 5];


++++++ CALCULATE TIME AND PRICE WEIGHT BASED ON RANGE ++++++++
if (menus.length > 0 && criteria.length > 0) {
      for (let i = 0; i < menus.length; i++) {
        const menu = menus[i];
        const tempMenu = menu;
        const menuId = menu.id;
        const servingTime = menu.servingTime;

        const price = menu.price;

        let scoreServingTime = wTime[0];
        if (servingTime <= 5) {
          scoreServingTime = wTime[0];
        } else if (servingTime >= 6 && servingTime <= 10) {
          scoreServingTime = wTime[1];
        } else if (servingTime > 10) {
          scoreServingTime = wTime[2];
        }
        let scorePrice = wPrice[0];
        if (price <= 7000) {
          scorePrice = wPrice[0];
        } else if (price >= 8000 && price <= 18000) {
          scorePrice = wPrice[1];
        } else if (price >= 19000 && price <= 25000) {
          scorePrice = wPrice[2];
        } else if (price >= 26000) {
          scorePrice = wPrice[3];
        }
      }
}

++++ C3 +++++
 const count = orderDetail.filter(
          (obj) =>
            obj.menuId === menuId && new Date(obj.createdDate) >= fiveDaysAgo
        ).length;

+++++ matrik keputusan +++++
const calculateScoreHelper = (
  tempMenu,
  resultWQuantity,
  resultWTime,
  resultWPrice,
  criteria
) => {
  const pricesArray = resultWPrice.map((menu) => menu.price);
  const timeArray = resultWTime.map((menu) => menu.time);
  const quantityArray = resultWQuantity.map((menu) => menu.quantity);
  const indexQuantityArray = [];
  const indexTimeArray = [];
  const indexPriceArray = [];
  for (let i = 0; i < resultWQuantity.length; i++) {
    const indexQuantity = pricesArray[i] / Math.max(...pricesArray);
    indexQuantityArray.push(indexQuantity);
  }
  for (let i = 0; i < resultWTime.length; i++) {
    const indexTime = Math.min(...timeArray) / timeArray[i];
    indexTimeArray.push(parseFloat(indexTime.toFixed(2)));
  }
  for (let i = 0; i < resultWPrice.length; i++) {
    const indexPrice = Math.min(...pricesArray) / pricesArray[i];
    indexPriceArray.push(parseFloat(indexPrice.toFixed(2)));
  }

  return {
    quantity: indexQuantityArray,
    time: indexTimeArray,
    price: indexPriceArray,
  };
};

++++ menghitung rangking +++++
const alternativeWeightCalc = (scoring, menu) => {
  if (
    scoring.resultQuantityArray.length > 0 &&
    scoring.resultTimeArray.length > 0 &&
    scoring.resultPriceArray.length > 0
  ) {
    const result = [];
    for (let i = 0; i < scoring.resultQuantityArray.length; i++) {
      const quantity = scoring.resultQuantityArray[i];
      const time = scoring.resultTimeArray[i];
      const price = scoring.resultPriceArray[i];
      const alternativeScore = quantity + time + price;
      const obj = {
        ...menu[i],
        alternativeScore: alternativeScore,
      };
      result.push(obj);
    }
const filter = result.filter((x)=> x.category === "FOOD")
    return filter.sort((a, b) =>
      a.alternativeScore < b.alternativeScore ? 1 : -1
    );
  }
};